/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/trpc/[trpc]/route";
exports.ids = ["app/api/trpc/[trpc]/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/@supabase/realtime-js/dist/main sync recursive":
/*!************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/main/ sync ***!
  \************************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/@supabase/realtime-js/dist/main sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_SHISHUPAL_Documents_OneDrive_iitkgp_ac_in_Desktop_Sample_chatgpt_mobile_clone_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/trpc/[trpc]/route.ts */ \"(rsc)/./app/api/trpc/[trpc]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/trpc/[trpc]/route\",\n        pathname: \"/api/trpc/[trpc]\",\n        filename: \"route\",\n        bundlePath: \"app/api/trpc/[trpc]/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\SHISHUPAL\\\\Documents\\\\OneDrive - iitkgp.ac.in\\\\Desktop\\\\Sample\\\\chatgpt-mobile-clone\\\\app\\\\api\\\\trpc\\\\[trpc]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_SHISHUPAL_Documents_OneDrive_iitkgp_ac_in_Desktop_Sample_chatgpt_mobile_clone_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/trpc/[trpc]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0cnBjJTJGJTVCdHJwYyU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdHJwYyUyRiU1QnRycGMlNUQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ0cnBjJTJGJTVCdHJwYyU1RCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNTSElTSFVQQUwlNUNEb2N1bWVudHMlNUNPbmVEcml2ZSUyMC0lMjBpaXRrZ3AuYWMuaW4lNUNEZXNrdG9wJTVDU2FtcGxlJTVDY2hhdGdwdC1tb2JpbGUtY2xvbmUlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q1NISVNIVVBBTCU1Q0RvY3VtZW50cyU1Q09uZURyaXZlJTIwLSUyMGlpdGtncC5hYy5pbiU1Q0Rlc2t0b3AlNUNTYW1wbGUlNUNjaGF0Z3B0LW1vYmlsZS1jbG9uZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDaUY7QUFDOUo7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Z3B0LW1vYmlsZS1jbG9uZS8/MWRhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxTSElTSFVQQUxcXFxcRG9jdW1lbnRzXFxcXE9uZURyaXZlIC0gaWl0a2dwLmFjLmluXFxcXERlc2t0b3BcXFxcU2FtcGxlXFxcXGNoYXRncHQtbW9iaWxlLWNsb25lXFxcXGFwcFxcXFxhcGlcXFxcdHJwY1xcXFxbdHJwY11cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3RycGMvW3RycGNdL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdHJwYy9bdHJwY11cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3RycGMvW3RycGNdL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcU0hJU0hVUEFMXFxcXERvY3VtZW50c1xcXFxPbmVEcml2ZSAtIGlpdGtncC5hYy5pblxcXFxEZXNrdG9wXFxcXFNhbXBsZVxcXFxjaGF0Z3B0LW1vYmlsZS1jbG9uZVxcXFxhcHBcXFxcYXBpXFxcXHRycGNcXFxcW3RycGNdXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90cnBjL1t0cnBjXS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/trpc/[trpc]/route.ts":
/*!**************************************!*\
  !*** ./app/api/trpc/[trpc]/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/adapters/fetch */ \"(rsc)/./node_modules/@trpc/server/dist/adapters/fetch/index.mjs\");\n/* harmony import */ var _lib_trpc_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/trpc/server */ \"(rsc)/./lib/trpc/server.ts\");\n// app/api/trpc/[trpc]/route.ts\n// This is the tRPC API route handler for Next.js App Router.\n\n // Import our tRPC router and context creator\nconst handler = (req)=>(0,_trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_0__.fetchRequestHandler)({\n        endpoint: \"/api/trpc\",\n        req,\n        router: _lib_trpc_server__WEBPACK_IMPORTED_MODULE_1__.appRouter,\n        createContext: ()=>(0,_lib_trpc_server__WEBPACK_IMPORTED_MODULE_1__.createContext)(),\n        onError: ({ path, error })=>{\n            console.error(`❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`);\n        }\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3RycGMvW3RycGNdL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwrQkFBK0I7QUFDL0IsNkRBQTZEO0FBRUs7QUFDTCxDQUFDLDZDQUE2QztBQUUzRyxNQUFNRyxVQUFVLENBQUNDLE1BQ2ZKLGdGQUFtQkEsQ0FBQztRQUNsQkssVUFBVTtRQUNWRDtRQUNBRSxRQUFRTCx1REFBU0E7UUFDakJDLGVBQWUsSUFBTUEsK0RBQWFBO1FBQ2xDSyxTQUFTLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUU7WUFDdkJDLFFBQVFELEtBQUssQ0FBQyxDQUFDLGlCQUFpQixFQUFFRCxRQUFRLFlBQVksRUFBRSxFQUFFQyxNQUFNRSxPQUFPLENBQUMsQ0FBQztRQUMzRTtJQUNGO0FBRXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGdwdC1tb2JpbGUtY2xvbmUvLi9hcHAvYXBpL3RycGMvW3RycGNdL3JvdXRlLnRzPzJiZjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZS50c1xyXG4vLyBUaGlzIGlzIHRoZSB0UlBDIEFQSSByb3V0ZSBoYW5kbGVyIGZvciBOZXh0LmpzIEFwcCBSb3V0ZXIuXHJcblxyXG5pbXBvcnQgeyBmZXRjaFJlcXVlc3RIYW5kbGVyIH0gZnJvbSAnQHRycGMvc2VydmVyL2FkYXB0ZXJzL2ZldGNoJztcclxuaW1wb3J0IHsgYXBwUm91dGVyLCBjcmVhdGVDb250ZXh0IH0gZnJvbSAnQC9saWIvdHJwYy9zZXJ2ZXInOyAvLyBJbXBvcnQgb3VyIHRSUEMgcm91dGVyIGFuZCBjb250ZXh0IGNyZWF0b3JcclxuXHJcbmNvbnN0IGhhbmRsZXIgPSAocmVxOiBSZXF1ZXN0KSA9PlxyXG4gIGZldGNoUmVxdWVzdEhhbmRsZXIoe1xyXG4gICAgZW5kcG9pbnQ6ICcvYXBpL3RycGMnLCAvLyBUaGUgZW5kcG9pbnQgZm9yIG91ciB0UlBDIEFQSVxyXG4gICAgcmVxLFxyXG4gICAgcm91dGVyOiBhcHBSb3V0ZXIsXHJcbiAgICBjcmVhdGVDb250ZXh0OiAoKSA9PiBjcmVhdGVDb250ZXh0KCksIC8vIOKchSBObyBhcmd1bWVudHNcclxuICAgIG9uRXJyb3I6ICh7IHBhdGgsIGVycm9yIH0pID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihg4p2MIHRSUEMgZmFpbGVkIG9uICR7cGF0aCA/PyAnPG5vLXBhdGg+J306ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG5leHBvcnQgeyBoYW5kbGVyIGFzIEdFVCwgaGFuZGxlciBhcyBQT1NUIH07XHJcbiJdLCJuYW1lcyI6WyJmZXRjaFJlcXVlc3RIYW5kbGVyIiwiYXBwUm91dGVyIiwiY3JlYXRlQ29udGV4dCIsImhhbmRsZXIiLCJyZXEiLCJlbmRwb2ludCIsInJvdXRlciIsIm9uRXJyb3IiLCJwYXRoIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsIkdFVCIsIlBPU1QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/trpc/[trpc]/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabaseClient.ts":
/*!*******************************!*\
  !*** ./lib/supabaseClient.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSupabaseAdminClient: () => (/* binding */ createSupabaseAdminClient),\n/* harmony export */   createSupabaseClient: () => (/* binding */ createSupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// lib/supabaseClient.ts\n\n// Server-side admin client (uses service_role key for full privileges)\nfunction createSupabaseAdminClient() {\n    const supabaseUrl = \"https://sseocjwcahftbnhrqgzd.supabase.co\";\n    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    console.log(\"[Supabase Admin Client] URL:\", supabaseUrl ? supabaseUrl.substring(0, 30) + \"...\" : \"Not Set\");\n    console.log(\"[Supabase Admin Client] Service Role Key:\", supabaseServiceRoleKey ? supabaseServiceRoleKey.substring(0, 5) + \"...\" : \"Not Set\");\n    if (!supabaseUrl || !supabaseServiceRoleKey) {\n        console.error(\"Supabase URL or Service Role Key are not set in environment variables.\");\n        throw new Error(\"Supabase environment variables are missing.\");\n    }\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceRoleKey);\n}\n// Client-side public client (uses anon key) - typically not used directly in this tRPC server context,\n// but good to have if you need client-side Supabase interactions\nfunction createSupabaseClient() {\n    const supabaseUrl = \"https://sseocjwcahftbnhrqgzd.supabase.co\";\n    const supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzZW9jandjYWhmdGJuaHJxZ3pkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxODUyNjUsImV4cCI6MjA2NDc2MTI2NX0.3Hq0h8jsUII0IUzASgoiT2VTt1m0KAk2TEHUa-tVJMA\";\n    console.log(\"[Supabase Client] URL:\", supabaseUrl ? supabaseUrl.substring(0, 30) + \"...\" : \"Not Set\");\n    console.log(\"[Supabase Client] Anon Key:\", supabaseAnonKey ? supabaseAnonKey.substring(0, 5) + \"...\" : \"Not Set\");\n    if (!supabaseUrl || !supabaseAnonKey) {\n        console.error(\"Supabase URL or Anon Key are not set in environment variables.\");\n        throw new Error(\"Supabase environment variables are missing.\");\n    }\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2VDbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0JBQXdCO0FBQzZCO0FBRXJELHVFQUF1RTtBQUNoRSxTQUFTQztJQUNkLE1BQU1DLGNBQWNDLDBDQUFvQztJQUN4RCxNQUFNRyx5QkFBeUJILFFBQVFDLEdBQUcsQ0FBQ0cseUJBQXlCO0lBRXBFQyxRQUFRQyxHQUFHLENBQUMsZ0NBQWdDUCxjQUFjQSxZQUFZUSxTQUFTLENBQUMsR0FBRyxNQUFNLFFBQVE7SUFDakdGLFFBQVFDLEdBQUcsQ0FBQyw2Q0FBNkNILHlCQUF5QkEsdUJBQXVCSSxTQUFTLENBQUMsR0FBRyxLQUFLLFFBQVE7SUFFbkksSUFBSSxDQUFDUixlQUFlLENBQUNJLHdCQUF3QjtRQUMzQ0UsUUFBUUcsS0FBSyxDQUFDO1FBQ2QsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBRUEsT0FBT1osbUVBQVlBLENBQUNFLGFBQWFJO0FBQ25DO0FBRUEsdUdBQXVHO0FBQ3ZHLGlFQUFpRTtBQUMxRCxTQUFTTztJQUNkLE1BQU1YLGNBQWNDLDBDQUFvQztJQUN4RCxNQUFNVyxrQkFBa0JYLGtOQUF5QztJQUVqRUssUUFBUUMsR0FBRyxDQUFDLDBCQUEwQlAsY0FBY0EsWUFBWVEsU0FBUyxDQUFDLEdBQUcsTUFBTSxRQUFRO0lBQzNGRixRQUFRQyxHQUFHLENBQUMsK0JBQStCSyxrQkFBa0JBLGdCQUFnQkosU0FBUyxDQUFDLEdBQUcsS0FBSyxRQUFRO0lBRXZHLElBQUksQ0FBQ1IsZUFBZSxDQUFDWSxpQkFBaUI7UUFDcENOLFFBQVFHLEtBQUssQ0FBQztRQUNkLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUVBLE9BQU9aLG1FQUFZQSxDQUFDRSxhQUFhWTtBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRncHQtbW9iaWxlLWNsb25lLy4vbGliL3N1cGFiYXNlQ2xpZW50LnRzPzNhN2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL3N1cGFiYXNlQ2xpZW50LnRzXHJcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XHJcblxyXG4vLyBTZXJ2ZXItc2lkZSBhZG1pbiBjbGllbnQgKHVzZXMgc2VydmljZV9yb2xlIGtleSBmb3IgZnVsbCBwcml2aWxlZ2VzKVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VwYWJhc2VBZG1pbkNsaWVudCgpIHtcclxuICBjb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTDtcclxuICBjb25zdCBzdXBhYmFzZVNlcnZpY2VSb2xlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWTtcclxuXHJcbiAgY29uc29sZS5sb2coJ1tTdXBhYmFzZSBBZG1pbiBDbGllbnRdIFVSTDonLCBzdXBhYmFzZVVybCA/IHN1cGFiYXNlVXJsLnN1YnN0cmluZygwLCAzMCkgKyAnLi4uJyA6ICdOb3QgU2V0Jyk7XHJcbiAgY29uc29sZS5sb2coJ1tTdXBhYmFzZSBBZG1pbiBDbGllbnRdIFNlcnZpY2UgUm9sZSBLZXk6Jywgc3VwYWJhc2VTZXJ2aWNlUm9sZUtleSA/IHN1cGFiYXNlU2VydmljZVJvbGVLZXkuc3Vic3RyaW5nKDAsIDUpICsgJy4uLicgOiAnTm90IFNldCcpO1xyXG5cclxuICBpZiAoIXN1cGFiYXNlVXJsIHx8ICFzdXBhYmFzZVNlcnZpY2VSb2xlS2V5KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBVUkwgb3IgU2VydmljZSBSb2xlIEtleSBhcmUgbm90IHNldCBpbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMuJyk7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgbWlzc2luZy4nKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlU2VydmljZVJvbGVLZXkpO1xyXG59XHJcblxyXG4vLyBDbGllbnQtc2lkZSBwdWJsaWMgY2xpZW50ICh1c2VzIGFub24ga2V5KSAtIHR5cGljYWxseSBub3QgdXNlZCBkaXJlY3RseSBpbiB0aGlzIHRSUEMgc2VydmVyIGNvbnRleHQsXHJcbi8vIGJ1dCBnb29kIHRvIGhhdmUgaWYgeW91IG5lZWQgY2xpZW50LXNpZGUgU3VwYWJhc2UgaW50ZXJhY3Rpb25zXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdXBhYmFzZUNsaWVudCgpIHtcclxuICBjb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTDtcclxuICBjb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWTtcclxuXHJcbiAgY29uc29sZS5sb2coJ1tTdXBhYmFzZSBDbGllbnRdIFVSTDonLCBzdXBhYmFzZVVybCA/IHN1cGFiYXNlVXJsLnN1YnN0cmluZygwLCAzMCkgKyAnLi4uJyA6ICdOb3QgU2V0Jyk7XHJcbiAgY29uc29sZS5sb2coJ1tTdXBhYmFzZSBDbGllbnRdIEFub24gS2V5OicsIHN1cGFiYXNlQW5vbktleSA/IHN1cGFiYXNlQW5vbktleS5zdWJzdHJpbmcoMCwgNSkgKyAnLi4uJyA6ICdOb3QgU2V0Jyk7XHJcblxyXG4gIGlmICghc3VwYWJhc2VVcmwgfHwgIXN1cGFiYXNlQW5vbktleSkge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2UgVVJMIG9yIEFub24gS2V5IGFyZSBub3Qgc2V0IGluIGVudmlyb25tZW50IHZhcmlhYmxlcy4nKTtcclxuICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBtaXNzaW5nLicpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KTtcclxufVxyXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwiY3JlYXRlU3VwYWJhc2VBZG1pbkNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlU2VydmljZVJvbGVLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwiY29uc29sZSIsImxvZyIsInN1YnN0cmluZyIsImVycm9yIiwiRXJyb3IiLCJjcmVhdGVTdXBhYmFzZUNsaWVudCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabaseClient.ts\n");

/***/ }),

/***/ "(rsc)/./lib/trpc/server.ts":
/*!****************************!*\
  !*** ./lib/trpc/server.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appRouter: () => (/* binding */ appRouter),\n/* harmony export */   createContext: () => (/* binding */ createContext)\n/* harmony export */ });\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var _auth0_nextjs_auth0__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth0/nextjs-auth0 */ \"(rsc)/./node_modules/@auth0/nextjs-auth0/dist/index.js\");\n/* harmony import */ var _auth0_nextjs_auth0__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_auth0_nextjs_auth0__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _supabaseClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../supabaseClient */ \"(rsc)/./lib/supabaseClient.ts\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n// lib/trpc/server.ts\n// This file defines the tRPC server-side router and procedures.\n\n\n\n\n // Import z from zod\n// Initialize tRPC\nconst t = _trpc_server__WEBPACK_IMPORTED_MODULE_0__.initTRPC.context().create();\n// Middleware to check if the user is authenticated\nconst isAuthenticated = t.middleware(async ({ ctx, next })=>{\n    if (!ctx.userId) {\n        throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    return next({\n        ctx: {\n            userId: ctx.userId\n        }\n    });\n});\n// Create base router and procedures\nconst appRouter = t.router({\n    // Public procedure for health check\n    health: t.procedure.query(()=>{\n        return {\n            status: \"ok\"\n        };\n    }),\n    // Protected procedures for chat functionality\n    chat: t.router({\n        // NEW: Get all chat sessions for the authenticated user\n        getChatSessions: t.procedure.use(isAuthenticated).query(async ({ ctx })=>{\n            const { userId, supabase } = ctx;\n            console.log(`[TRPC] Fetching chat sessions for user: ${userId}`);\n            const { data, error } = await supabase.from(\"chat_sessions\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n                ascending: false\n            }); // Order by newest first\n            if (error) {\n                console.error(\"Error fetching chat sessions:\", error);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to fetch chat sessions.\"\n                });\n            }\n            console.log(`[TRPC] Fetched ${data.length} chat sessions for user: ${userId}`);\n            return data;\n        }),\n        // NEW: Create a new chat session for the authenticated user\n        createChatSession: t.procedure.use(isAuthenticated).mutation(async ({ ctx })=>{\n            const { userId, supabase } = ctx;\n            console.log(`[TRPC] Creating new chat session for user: ${userId}`);\n            const { data, error } = await supabase.from(\"chat_sessions\").insert({\n                user_id: userId\n            }).select() // Select the inserted row to get its ID\n            .single(); // Expect a single row\n            if (error || !data) {\n                console.error(\"Error creating chat session:\", error);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to create new chat session.\"\n                });\n            }\n            console.log(`[TRPC] Created new chat session with ID: ${data.id}`);\n            return data; // Return the new session object\n        }),\n        // NEW: Delete a specific chat session and all its messages (due to CASCADE DELETE)\n        deleteChatSession: t.procedure.use(isAuthenticated).input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n            sessionId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().uuid()\n        })) // Expect a UUID string for session ID\n        .mutation(async ({ input, ctx })=>{\n            const { userId, supabase } = ctx;\n            const { sessionId } = input;\n            console.log(`[TRPC] Deleting chat session ${sessionId} for user: ${userId}`);\n            // First, verify the user owns this session before deleting\n            const { data: sessionData, error: sessionError } = await supabase.from(\"chat_sessions\").select(\"user_id\").eq(\"id\", sessionId).single();\n            if (sessionError || !sessionData || sessionData.user_id !== userId) {\n                console.error(`Attempted to delete session ${sessionId} not owned by user ${userId}`);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"FORBIDDEN\",\n                    message: \"You are not authorized to delete this chat session.\"\n                });\n            }\n            const { error } = await supabase.from(\"chat_sessions\").delete().eq(\"id\", sessionId); // Delete by session ID\n            if (error) {\n                console.error(`Error deleting chat session ${sessionId} from Supabase:`, error);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to delete chat session.\"\n                });\n            }\n            console.log(`[TRPC] Successfully deleted chat session: ${sessionId}`);\n            return {\n                success: true\n            };\n        }),\n        // NEW: Update the title of a specific chat session\n        updateChatSessionTitle: t.procedure.use(isAuthenticated).input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n            sessionId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().uuid(),\n            newTitle: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().min(1, \"Chat title cannot be empty\").max(100, \"Chat title is too long\")\n        })).mutation(async ({ input, ctx })=>{\n            const { userId, supabase } = ctx;\n            const { sessionId, newTitle } = input;\n            console.log(`[TRPC] Renaming session ${sessionId} to \"${newTitle}\" for user: ${userId}`);\n            // Verify the user owns this session before updating\n            const { data: sessionData, error: sessionError } = await supabase.from(\"chat_sessions\").select(\"user_id\").eq(\"id\", sessionId).single();\n            if (sessionError || !sessionData || sessionData.user_id !== userId) {\n                console.error(`Attempted to rename session ${sessionId} not owned by user ${userId}`);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"FORBIDDEN\",\n                    message: \"You are not authorized to rename this chat session.\"\n                });\n            }\n            const { data, error } = await supabase.from(\"chat_sessions\").update({\n                title: newTitle\n            }).eq(\"id\", sessionId).select().single(); // Select the updated row\n            if (error || !data) {\n                console.error(`Error updating session title for ${sessionId}:`, error);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to rename chat session.\"\n                });\n            }\n            console.log(`[TRPC] Session ${sessionId} renamed to \"${data.title}\".`);\n            return data; // Return the updated session object\n        }),\n        // MODIFIED: Fetch messages for a specific chat session\n        getMessages: t.procedure.use(isAuthenticated).input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n            sessionId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().uuid()\n        })) // Now requires a sessionId\n        .query(async ({ ctx, input })=>{\n            const { userId, supabase } = ctx;\n            const { sessionId } = input;\n            console.log(`[TRPC] Fetching messages for session: ${sessionId} for user: ${userId}`);\n            const { data, error } = await supabase.from(\"messages\").select(\"*\").eq(\"session_id\", sessionId) // Filter by session_id\n            .order(\"created_at\", {\n                ascending: true\n            });\n            if (error) {\n                console.error(\"Error fetching messages for session:\", sessionId, error);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to fetch messages for session.\"\n                });\n            }\n            console.log(`[TRPC] Fetched ${data.length} messages for session: ${sessionId}`);\n            return data;\n        }),\n        // MODIFIED: Send a text message with a specific session ID\n        sendTextMessage: t.procedure.use(isAuthenticated).input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n            prompt: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n            isUser: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean(),\n            sessionId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().uuid() // Now requires a sessionId\n        })).mutation(async ({ input, ctx })=>{\n            const { userId, supabase } = ctx;\n            const { prompt, isUser, sessionId } = input;\n            console.log(`[TRPC] User ${userId} sending text message to session ${sessionId}: \"${prompt}\"`);\n            // Save user's message first\n            const { error: userMessageError } = await supabase.from(\"messages\").insert({\n                user_id: userId,\n                session_id: sessionId,\n                content: prompt,\n                role: \"user\",\n                type: \"text\"\n            });\n            if (userMessageError) {\n                console.error(\"Error saving user message:\", userMessageError);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to save user message.\"\n                });\n            }\n            console.log(\"[TRPC] User message saved to Supabase.\");\n            // Robust API Key check and logging for text model\n            const apiKeyText = process.env.GOOGLE_API_KEY_TEXT;\n            console.log(`[TRPC] (sendTextMessage) GOOGLE_API_KEY_TEXT value: ${apiKeyText ? \"Key is present (truncated for security): \" + apiKeyText.substring(0, 5) + \"...\" : \"Key is undefined or empty\"}`);\n            if (!apiKeyText) {\n                console.error(\"GOOGLE_API_KEY_TEXT is not set for text generation.\");\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Gemini API key for text is missing.\"\n                });\n            }\n            const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_3__.GoogleGenerativeAI(apiKeyText);\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-2.0-flash\"\n            });\n            try {\n                console.log(\"[TRPC] Calling Gemini text model...\");\n                const result = await model.generateContent(prompt);\n                const response = result.response;\n                const text = response.text();\n                console.log(`[TRPC] Gemini text response: \"${text}\"`);\n                // Save AI's response\n                const { error: aiMessageError } = await supabase.from(\"messages\").insert({\n                    user_id: userId,\n                    session_id: sessionId,\n                    content: text,\n                    role: \"model\",\n                    type: \"text\"\n                });\n                if (aiMessageError) {\n                    console.error(\"Error saving AI message:\", aiMessageError);\n                    throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                        code: \"INTERNAL_SERVER_ERROR\",\n                        message: \"Failed to save AI message.\"\n                    });\n                }\n                console.log(\"[TRPC] AI message saved to Supabase.\");\n                return {\n                    userMessage: prompt,\n                    aiMessage: text\n                };\n            } catch (error) {\n                console.error(\"Error generating text with Gemini:\", error);\n                if (error instanceof Error) {\n                    console.error(\"Gemini error message:\", error.message);\n                    console.error(\"Gemini error name:\", error.name);\n                }\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: `Failed to generate AI text response: ${error instanceof Error ? error.message : String(error)}`\n                });\n            }\n        }),\n        // MODIFIED: Generate an image with a specific session ID\n        generateImage: t.procedure.use(isAuthenticated).input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n            prompt: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n            sessionId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().uuid() // Now requires a sessionId\n        })).mutation(async ({ input, ctx })=>{\n            const { userId, supabase } = ctx;\n            const { prompt, sessionId } = input;\n            console.log(`[TRPC] User ${userId} requesting image generation for session ${sessionId}, prompt: \"${prompt}\"`);\n            // Save user's image prompt\n            const { error: userPromptError } = await supabase.from(\"messages\").insert({\n                user_id: userId,\n                session_id: sessionId,\n                content: prompt,\n                role: \"user\",\n                type: \"image_prompt\"\n            });\n            if (userPromptError) {\n                console.error(\"Error saving user image prompt:\", userPromptError);\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to save image prompt.\"\n                });\n            }\n            console.log(\"[TRPC] User image prompt saved to Supabase.\");\n            // --- TEMPORARY WORKAROUND FOR BILLING/IMAGEN API ISSUE ---\n            const apiKeyText = process.env.GOOGLE_API_KEY_TEXT;\n            console.log(`[TRPC] (generateImage workaround) GOOGLE_API_KEY_TEXT value: ${apiKeyText ? \"Key is present (truncated for security): \" + apiKeyText.substring(0, 5) + \"...\" : \"Key is undefined or empty\"}`);\n            if (!apiKeyText) {\n                console.error(\"GOOGLE_API_KEY_TEXT is not set for image workaround.\");\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Gemini API key for text is missing (for image workaround).\"\n                });\n            }\n            const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_3__.GoogleGenerativeAI(apiKeyText);\n            const textModel = genAI.getGenerativeModel({\n                model: \"gemini-2.0-flash\"\n            });\n            try {\n                console.log(\"[TRPC] (Workaround) Calling Gemini text model for image prompt...\");\n                const textResult = await textModel.generateContent(`Generate a descriptive caption for an image of: ${prompt}.`);\n                const textResponse = textResult.response.text();\n                console.log(`[TRPC] (Workaround) Generated text for image prompt: \"${textResponse}\"`);\n                const placeholderImageUrl = `https://placehold.co/400x200/cccccc/000000?text=Image+for:${encodeURIComponent(prompt.substring(0, 20))}...`;\n                const { error: imageSaveError } = await supabase.from(\"messages\").insert({\n                    user_id: userId,\n                    session_id: sessionId,\n                    content: placeholderImageUrl,\n                    role: \"model\",\n                    type: \"image\"\n                });\n                if (imageSaveError) {\n                    console.error(\"Error saving generated image (workaround) to Supabase:\", imageSaveError);\n                    throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                        code: \"INTERNAL_SERVER_ERROR\",\n                        message: \"Failed to save generated image (workaround).\"\n                    });\n                }\n                console.log(\"[TRPC] Generated image (workaround) saved to Supabase.\");\n                return {\n                    imageUrl: placeholderImageUrl\n                };\n            } catch (error) {\n                console.error(\"Error in generateImage (workaround) mutation:\", error);\n                if (error instanceof Error) {\n                    console.error(\"Workaround error message:\", error.message);\n                    console.error(\"Workaround error name:\", error.name);\n                }\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: `Failed to generate image (workaround): ${error instanceof Error ? error.message : String(error)}`\n                });\n            }\n        // --- END TEMPORARY WORKAROUND ---\n        })\n    })\n});\n// Create tRPC API handler context\nconst createContext = async ()=>{\n    // Get Auth0 session\n    const session = await (0,_auth0_nextjs_auth0__WEBPACK_IMPORTED_MODULE_1__.getSession)();\n    const userId = session?.user?.sub || null; // Auth0 user ID\n    // Create Supabase client for the current context\n    const supabase = (0,_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.createSupabaseAdminClient)();\n    console.log(`[TRPC Context] User ID: ${userId ? userId : \"Not authenticated\"}`);\n    return {\n        session,\n        userId,\n        supabase\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/trpc/server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@auth0","vendor-chunks/tslib","vendor-chunks/@trpc","vendor-chunks/joi","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/@sideway","vendor-chunks/@hapi","vendor-chunks/debug","vendor-chunks/object-hash","vendor-chunks/cookie","vendor-chunks/oidc-token-hash","vendor-chunks/@panva","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/url-join","vendor-chunks/has-flag","vendor-chunks/@supabase","vendor-chunks/ws","vendor-chunks/zod","vendor-chunks/whatwg-url","vendor-chunks/tr46","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSHISHUPAL%5CDocuments%5COneDrive%20-%20iitkgp.ac.in%5CDesktop%5CSample%5Cchatgpt-mobile-clone&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();